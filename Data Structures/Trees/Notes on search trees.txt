BINARY SEARCH TREE NOTES:
Algorithm 	Average 	Worst Case
Space 		O(n) 		O(n)
Search 		O(log n) 	O(n)
Insert 		O(log n) 	O(n)
Delete 		O(log n) 	O(n)

How it works, what it looks like. How to get worst case for each function. Why log(n)
Orders:
(a) Inorder (Left, Root, Right) 4,2,5,1,3
(b) Preorder (Root, Left, Right) 1,2,4,5,3
(c) Postorder (Left, Right, Root) 4,5,2,3,1
(d) BFS 1,2,3,4,5
Graph: 1->(2->(4,5), 3) [2 and 3 are children of 1. 4 and 5 are children of 2.]

Search - straightforward
Insert - straightforward
Delete - with node with no children
       - with one child, sent child to parent.right/left (depending which side node is on)
       - with node with two children, find smallest node (X) in right subtree, and value with X.value, remove X


AVL TREES:
Algorithm 	Average 	Worst Case
Space 		O(n) 		O(n)
Search 		O(log n) 	O(log n)
Insert 		O(log n) 	O(log n)
Delete 		O(log n) 	O(log n)
In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases.
For Node N: BalanceFactor(N) = Height(RightSubtree(N)) - Height(LeftSubtree(N))
There are four cases:
	1. Right-right
	2. Left-left
	3. Right-left
	4. Left-right
Right and left rotations. (first two cases)
	Left rotation from N means right heavy and right tree is -not- left heavy.
	Right rotation from N means left heavy and left tree is -not- right heavy.
Right-left and left-right rotations. (second two cases)
	Right-left rotation from N means right heavy and right tree is left heavy.
	Left-right rotation from N means left heavy and left tree is right heavy.
As long as you insert and delete one at a time, and check after each modification, you should only every have to do one single or double rotation per insertion/deletion.
The cost of a rotation, single or double, is constant.
For look-up intensive operations, AVL trees are faster than Red-Black trees because they are more strictly balanced.


RED BLACK TREE NOTES:
Algorithm 	Average 	Worst Case
Space 		O(n) 		O(n)
Search 		O(log n) 	O(log n)
Insert 		O(log n) 	O(log n)
Delete 		O(log n) 	O(log n)

Properties to maintain:
1) Every node has a color either red or black.
2) Root of tree is always black.
3) There are no two adjacent red nodes (A red node cannot have a red parent or red child).
4) Every path from root to a NULL node has same number of black nodes.

Search, insert and delete function the same as in BST.
Rearranging and recoloring are done after the tree is modified, in an efficient manner.

Insert:
See wikipedia page.
Case 1: root node is black (good)
Case 2: parent is black (good, color red)
Case 3: parent and uncle are red (turn both to black, grandparent goes red)
Case 4: parent red, uncle black (see picture)
Case 5: two red in a row (see picture)

Delete:
See wikipedia page.


B TREES:
Algorithm 	Average 	Worst Case
Space 		O(n) 		O(n)
Search 		O(log n) 	O(log n)
Insert 		O(log n) 	O(log n)
Delete 		O(log n) 	O(log n)

Each node can have a variable number of children.
Commonly used in databases and file systems.
Definition:
According to Knuth's definition, a B-tree of order m is a tree which satisfies the following properties:
1. Every node has at most m children.
2. Every non-leaf node (except root) has at least ⌈m/2⌉ children.
3. The root has at least two children if it is not a leaf node.
4. A non-leaf node with k children contains k−1 keys.
5. All leaves appear in the same level


2-3 TREES (2-3 B TREES):
Algorithm 	Average 	Worst Case
Space 		O(n) 		O(n)
Search 		O(log n) 	O(log n)
Insert 		O(log n) 	O(log n)
Delete 		O(log n) 	O(log n)
Specific type of (a,b)-tree that is widely used and popular.
Each node has between 1 and 2 keys and between 2 and 3 children
Search - easy
Insert - easy (special case: if a node becomes a 4-node, it is split into two 2-nodes and middle key is moved to parent node.)